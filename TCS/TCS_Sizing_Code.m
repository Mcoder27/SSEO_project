%% THERMAL CONTROL SIZING 
clc
clear

%% DATA
i_orb=96.97;
ecliptic=23.44; 
h=320;
r_orb = h + astroConstants(13);
Q_max = 1; % maximum heat generated by internal components
Q_min = 1; % minimum heat generated by internal components
x_bus = 1;
y_bus = 1;
z_bus = 1;
r_aladin = 1;
z_aladin = 0.75;
T_sc_max = 1; % maximum temperature reachable by the s/c
T_sc_min = 1; % minimum temperature reachable by the s/c

%% GEOMETRY FOR THE PROBLEM
A_tot = pi*r_aladin^2 + 2*pi*r*z_aladin + 2*x_bus*z_bus + 2*y_bus*z_bus + x_bus*y_bus; %la prima aerea serve?
R = sqrt(A_tot/(4*pi));

F_pl= 1/2*(1 - (sqrt((h/R_pl)^2 + 2* h/R_pl))/(1 + h/R_pl));
A_cross_pl = A_tot * F_pl; 

A_cross_Sun = pi * R^2;

A_space = A_tot - A_cross_pl;

%% HEAT SOURCES 
% DATA
q0 = 1367.5; % solar heat flux at 1 AU
a = 0.4; % planetary albedo constant
theta_pl = 1; % irradiance factor (ANGLE) between s/c and Sun (PLANET), in teoria dice che in NADIR POINTING il caso peggiore è theta=0
R_pl = astroConstants(13);
sigma = 5.67 * 10^-8; % Boltzmann constant
epsilon_pl = 0.8; % infrared emissivity of the planet
T_pl = 288; % Temperature of the planet SEEN FROM SPACE, oppure 255
%ricordarsi che MATLAB vuole gli anngoli in raadianti
% COMPUTATIONS, HEAT FLUXES 
q_sun = q0; %già tralasciato il valore che si annulla
q_albedo = q_sun * a * cos(theta_pl) * (R_pl/r_orb)^2;
q_IR = sigma * epsilon_pl * T_pl^4 * (R_pl/r_orb)^2;

%% HEAT POWER
% DATA
theta_sun = i_orb - ecliptic; % inclination angle between Sun and s/c 
alpha_sc = 1; % equivalent satellite solar absorbtivity
epsilon_sc = 1; % equivalent satellite surface IR emissivity
T_space = 3; 

% COMPUTATIONS
Q_sun = A_cross_Sun * alpha_sc * cos(theta_sun) * q_sun;
Q_albedo = A_cross_pl * alpha_sc * q_albedo;
Q_IR = A_cross_pl * epsilon_sc * q_IR;

% Q_emitted = sigma * epsilon_sc * A_space * (T_sc^4 - T_space^4);

%% HOT CASE
A_D_rad_LIM = 1; % maximum area I allow my deployable radiators to be

T_sc_hot = ((Q_sun + Q_albedo + Q_IR + Q_max)/(sigma * epsilon_sc * A_space) + T_space^4)^(1/4);
if T_sc_hot >= T_sc_max - 15 %qua ci va il MENO
    % RADIATORS DATA 
    epsilon_rad = 1;
    
    % BODY MOUNTED RADIATOR COMPUTATION
    fun_A_BM_rad = @(x) (Q_sun + Q_albedo + Q_IR + Q_max) / (epsilon_sc * (A_space - x) / (epsilon_rad * x) + 1) - sigma * epsilon_rad * x * ((T_sc_max -15)^4 - T_space^4);
    A_BM_rad = fsolve(fun_A_BM_rad, 1);

    if A_BM_rad > 0.8*A_space %io metterei anche 0.6 o 0.7
        % DEPLOYABLE RADIATORS COMPUTATION
        fun_A_D_rad = @(x) (Q_sun + Q_albedo + Q_IR + Q_max) / (epsilon_sc * (A_space - x) / (epsilon_rad * x)) - sigma * epsilon_rad * x * ((T_sc_max -15)^4 - T_space^4);
        A_D_rad = fsolve(fun_A_D_rad, 1);

        if A_D_rad > A_D_rad_LIM 
            % ACTIVE COOLER COMPUTATION
            Q_emitted = sigma * epsilon_sc * (A_space - A_D_rad_LIM) * ((T_sc_max - 15)^4 - T_space^4);
            Q_cool = sigma * epsilon_rad * A_D_rad_LIM * ((T_sc_max - 15)^4 - T_space^4);

        end
    end

else
    fprintf('NO COOLERS REQUIRED')
end

%% COLD CASE
T_sc_cold = ((Q_IR + Q_min)/(sigma * epsilon_sc * A_space) + T_space^4)^(1/4);
if T_sc_cold <= T_sc_min + 15
    % HEATER COMPUTATION
    Q_emitted_cold = sigma * epsilon_sc * A_space * ((T_sc_min + 15)^4 - T_space^4);
    Q_HEATER = Q_emitted - Q_IR - Q_min; 

else
    fprintf('NO HEATERS REQUIRED')
end


